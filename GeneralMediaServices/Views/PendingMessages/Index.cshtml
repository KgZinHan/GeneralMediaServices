@model IEnumerable<GeneralMediaServices.Models.MediaService>

@{
    ViewData["Title"] = "Pending Messages List";
}
<style>
    th, td {
        overflow: hidden;
        white-space: nowrap;
    }
</style>
<div class="col-12">
    <div id="messageBox" class="alert alert-danger @((ViewBag.AlertMessage != null) ? "" : "d-none")" role="alert">
        @ViewBag.AlertMessage
    </div>
</div>
<div class="col-12">
    <div id="messageBox" class="alert alert-info @((ViewBag.InfoMessage != null) ? "" : "d-none")" role="alert">
        @ViewBag.InfoMessage 
    </div>
</div>

<div class="col-12">
    <div class="card">
        <div class="card-header bg-dark">
            <h5><i class="nav-icon fas fa-comment-slash"></i>&emsp;Pending Messages to deliver</h5>
        </div>
        <div style="overflow: auto;max-width: 100%">
            <table id="reportedDataTable" class="table table-striped table-bordered"> 
                <thead class="text-md-center">
                    <tr class="bg-dark" style="font-size: 14px">
                        <th style="width: 10px">
                            @Html.DisplayNameFor(model => model.NumberCount)
                        </th>
                        <th style="width: 150px">
                            @Html.DisplayNameFor(model => model.Msg_received_dt)
                        </th>
                        <th style="width: 100px">
                            @Html.DisplayNameFor(model => model.Sys_nme)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Msg_desc)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ErrorLog)
                        </th>
                    </tr>
                </thead>
                <tbody class="text-md-center">
                @foreach (var item in Model) {
                    <tr style="font-size: 14px">
                        <td>
                            @Html.DisplayFor(modelItem => item.NumberCount)
                        </td>
                        <td style="text-align: left">
                            @Html.DisplayFor(modelItem => item.Msg_received_dt)
                        </td>
                            <td style="text-align: left">
                            @Html.DisplayFor(modelItem => item.Sys_nme)
                        </td>
                        <td style="text-align: left">
                            @Html.DisplayFor(modelItem => item.Msg_desc)
                        </td>
                            <td style="text-align: left">
                            @Html.DisplayFor(modelItem => item.ErrorLog)
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>
<!-- jQuery -->
<script src="../../plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="../../plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- DataTables  & Plugins -->
<script src="../../plugins/datatables/jquery.dataTables.min.js"></script>
<script src="../../plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
<script src="../../plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
<script src="../../plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
<!-- Page specific script -->
<script>
    $(function () {
        $('#reportedDataTable').DataTable({
            "paging": true,
            "lengthChange": false,
            "searching": false,
            "ordering": true,
            "info": false,
            "autoWidth": false,
            "responsive": true,
        });
    });
</script>
<script>
    $(document).ready(function () {
        setTimeout(function () {
            $("#messageBox").fadeOut();
        }, 5000);
    });
</script>
@*<script>
    setInterval(function () {
        $.ajax({
            url: "/MediaServices/Index",
            type: "GET",
            success: function (result) {
                console.log("success");
            },
            error: function (xhr, status, error) {
                console.log(xhr.responseText);
            }
        });
    }, 60000);// Call the function every 1 minutes
 </script>*@

@*<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
        // Create a new SignalR connection object
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/messageHub")
            .build();

        // Start the connection to the server
        connection.start()
            .then(() => {
                console.log("SignalR connection established.");
            })
            .catch((err) => {
                console.error("SignalR connection error: ", err);
            });

        // Define a client-side event handler for the "ReceiveData" event
        connection.on("ReceiveData", function (message) {
            document.getElementById('msgNoti').textContent = message;
            document.getElementById('msgNoti').className = "alert alert-dark";
        });
</script>*@






